using System;
using System.Collections.Generic;

using NSubstitute;

using Shouldly;

using Xunit;

namespace Stove.Tests
{
    public class Check_Tests
    {
        [Fact]
        public void NotNull_should_throw_ArgumentNullException_when_value_is_null()
        {
            //-----------------------------------------------------------------------------------------------------------
            // Arrange
            //-----------------------------------------------------------------------------------------------------------
            string testString = null;
            string parameterName = nameof(testString);

            //-----------------------------------------------------------------------------------------------------------
            // Act
            //-----------------------------------------------------------------------------------------------------------
            Action check = () => Check.NotNull(testString, parameterName);

            //-----------------------------------------------------------------------------------------------------------
            // Assert
            //-----------------------------------------------------------------------------------------------------------
            check.ShouldThrow<ArgumentNullException>();
        }

        [Fact]
        public void NotNull_should_throw_ArgumentException_with_message_when_value_is_null_parametername_is_not_null()
        {
            //-----------------------------------------------------------------------------------------------------------
            // Arrange
            //-----------------------------------------------------------------------------------------------------------
            string testString = null;
            string parameterName = nameof(testString);
            string propertyName = nameof(testString);

            //-----------------------------------------------------------------------------------------------------------
            // Act
            //-----------------------------------------------------------------------------------------------------------
            Action check = () => Check.NotNull(testString, parameterName, propertyName);

            //-----------------------------------------------------------------------------------------------------------
            // Assert
            //-----------------------------------------------------------------------------------------------------------
            check.ShouldThrow<ArgumentException>(propertyName + " " + parameterName + " argument property is null!");
        }

        [Fact]
        public void NotNullOrWhiteSpace_should_throw_exception_when_value_is_null()
        {
            //-----------------------------------------------------------------------------------------------------------
            // Arrange
            //-----------------------------------------------------------------------------------------------------------
            string testString = null;
            string parameterName = nameof(testString);

            //-----------------------------------------------------------------------------------------------------------
            // Act
            //-----------------------------------------------------------------------------------------------------------
            Action check = () => Check.NotNullOrWhiteSpace(testString, parameterName);

            //-----------------------------------------------------------------------------------------------------------
            // Assert
            //-----------------------------------------------------------------------------------------------------------
            check.ShouldThrow<ArgumentException>($"{parameterName} can not be null, empty or white space!");
        }

        [Fact]
        public void NotNullOrWhiteSpace_should_throw_exception_when_value_is_empty()
        {
            //-----------------------------------------------------------------------------------------------------------
            // Arrange
            //-----------------------------------------------------------------------------------------------------------
            string testString = string.Empty;
            string parameterName = nameof(testString);

            //-----------------------------------------------------------------------------------------------------------
            // Act
            //-----------------------------------------------------------------------------------------------------------
            Action check = () => Check.NotNullOrWhiteSpace(testString, parameterName);

            //-----------------------------------------------------------------------------------------------------------
            // Assert
            //-----------------------------------------------------------------------------------------------------------
            check.ShouldThrow<ArgumentException>($"{parameterName} can not be null, empty or white space!");
        }

        [Fact]
        public void NotNullOrWhiteSpace_should_throw_exception_when_value_is_whitespace()
        {
            //-----------------------------------------------------------------------------------------------------------
            // Arrange
            //-----------------------------------------------------------------------------------------------------------
            var testString = " ";
            string parameterName = nameof(testString);

            //-----------------------------------------------------------------------------------------------------------
            // Act
            //-----------------------------------------------------------------------------------------------------------
            Action check = () => Check.NotNullOrWhiteSpace(testString, parameterName);

            //-----------------------------------------------------------------------------------------------------------
            // Assert
            //-----------------------------------------------------------------------------------------------------------
            check.ShouldThrow<ArgumentException>($"{parameterName} can not be null, empty or white space!");
        }

        [Fact]
        public void NotNullOrEmpty_should_throw_exception_when_value_is_null()
        {
            //-----------------------------------------------------------------------------------------------------------
            // Arrange
            //-----------------------------------------------------------------------------------------------------------
            ICollection<object> testCollection = null;
            string parameterName = nameof(testCollection);

            //-----------------------------------------------------------------------------------------------------------
            // Act
            //-----------------------------------------------------------------------------------------------------------
            Action check = () => Check.NotNullOrEmpty(testCollection, parameterName);

            //-----------------------------------------------------------------------------------------------------------
            // Assert
            //-----------------------------------------------------------------------------------------------------------
            check.ShouldThrow<ArgumentException>(parameterName + "is empty!");
        }

        [Fact]
        public void NotNullOrEmpty_should_throw_exception_when_value_is_empty()
        {
            //-----------------------------------------------------------------------------------------------------------
            // Arrange
            //-----------------------------------------------------------------------------------------------------------
            ICollection<object> testCollection = new List<object>();
            string parameterName = nameof(testCollection);

            //-----------------------------------------------------------------------------------------------------------
            // Act
            //-----------------------------------------------------------------------------------------------------------
            Action check = () => Check.NotNullOrEmpty(testCollection, parameterName);

            //-----------------------------------------------------------------------------------------------------------
            // Assert
            //-----------------------------------------------------------------------------------------------------------
            check.ShouldThrow<ArgumentException>(parameterName + "is empty!");
        }

        [Fact]
        public void NullButNotEmpty_should_throw_exception_when_value_is_null()
        {
            //-----------------------------------------------------------------------------------------------------------
            // Arrange
            //-----------------------------------------------------------------------------------------------------------
            string testString = string.Empty;
            string parameterName = nameof(testString);

            //-----------------------------------------------------------------------------------------------------------
            // Act
            //-----------------------------------------------------------------------------------------------------------
            Action check = () => Check.NullButNotEmpty(testString, parameterName);

            //-----------------------------------------------------------------------------------------------------------
            // Assert
            //-----------------------------------------------------------------------------------------------------------
            check.ShouldThrow<ArgumentException>(parameterName + "is empty!");
        }

        [Fact]
        public void HasNoNulls_should_throw_exception_when_value_is_null()
        {
            //-----------------------------------------------------------------------------------------------------------
            // Arrange
            //-----------------------------------------------------------------------------------------------------------
            var testObjects = new List<object>();
            testObjects.Add(new { Item = 1 });
            testObjects.Add(null);
            string parameterName = nameof(testObjects);

            //-----------------------------------------------------------------------------------------------------------
            // Act
            //-----------------------------------------------------------------------------------------------------------
            Action check = () => Check.HasNoNulls(testObjects, parameterName);

            //-----------------------------------------------------------------------------------------------------------
            // Assert
            //-----------------------------------------------------------------------------------------------------------
            check.ShouldThrow<ArgumentException>();
        }

        [Fact]
        public void IsDefined_should_throw_exception_when_value_is_not_an_enum()
        {
            //-----------------------------------------------------------------------------------------------------------
            // Arrange
            //-----------------------------------------------------------------------------------------------------------
            var testNotEnum = Arg.Any<bool>();
            string parameterName = nameof(testNotEnum);

            //-----------------------------------------------------------------------------------------------------------
            // Act
            //-----------------------------------------------------------------------------------------------------------
            Action check = () => Check.IsDefined(testNotEnum, parameterName);

            //-----------------------------------------------------------------------------------------------------------
            // Assert
            //-----------------------------------------------------------------------------------------------------------
            check.ShouldThrow<ArgumentException>(parameterName + " is an invalid Enum!");
        }

        [Fact]
        public void ValidEntityType_should_throw_exception_when_value_is_not_a_class()
        {
            //-----------------------------------------------------------------------------------------------------------
            // Arrange
            //-----------------------------------------------------------------------------------------------------------
            Type testValue = typeof(IEnumerable<>);
            string parameterName = nameof(testValue);

            //-----------------------------------------------------------------------------------------------------------
            // Act
            //-----------------------------------------------------------------------------------------------------------
            Action check = () => Check.ValidEntityType(testValue, parameterName);

            //-----------------------------------------------------------------------------------------------------------
            // Assert
            //-----------------------------------------------------------------------------------------------------------
            check.ShouldThrow<ArgumentException>(parameterName + " is an invalid entity type!");
        }

        [Fact]
        public void NotEmpty_should_throw_exception_when_value_is_null()
        {
            //-----------------------------------------------------------------------------------------------------------
            // Arrange
            //-----------------------------------------------------------------------------------------------------------
            string testValue = null;
            string parameterName = nameof(testValue);

            //-----------------------------------------------------------------------------------------------------------
            // Act
            //-----------------------------------------------------------------------------------------------------------
            Action check = () => Check.NotEmpty(testValue, parameterName);

            //-----------------------------------------------------------------------------------------------------------
            // Assert
            //-----------------------------------------------------------------------------------------------------------
            check.ShouldThrow<ArgumentException>(parameterName + " can not be empty!");
        }

        [Fact]
        public void NotEmpty_should_throw_exception_when_value_is_empty()
        {
            //-----------------------------------------------------------------------------------------------------------
            // Arrange
            //-----------------------------------------------------------------------------------------------------------
            var testValue = " ";
            string parameterName = nameof(testValue);

            //-----------------------------------------------------------------------------------------------------------
            // Act
            //-----------------------------------------------------------------------------------------------------------
            Action check = () => Check.NotEmpty(testValue, parameterName);

            //-----------------------------------------------------------------------------------------------------------
            // Assert
            //-----------------------------------------------------------------------------------------------------------
            check.ShouldThrow<ArgumentException>(parameterName + " can not be empty!");
        }
    }
}
